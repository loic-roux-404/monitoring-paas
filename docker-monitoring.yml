version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  monitor-net:
    driver: overlay
    name: inbound
  traefik-public:
    external: true

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitor-net
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
       - traefik.enable=true
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
        - traefik.http.routers.prometheus.entrypoints=http,https
        - traefik.http.routers.prometheus.middlewares=redirect@file,auth@file
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - "./alertmanager/:/etc/alertmanager/"
    networks:
      - monitor-net
      - traefik-public
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
      restart_policy:
        condition: on-failure
    labels:
        - traefik.enable=true
        - traefik.http.services.alertmanager.loadbalancer.server.port=9093
        - traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`)
        - traefik.http.routers.alertmanager.entrypoints=http,https
        - traefik.http.routers.alertmanager.middlewares=redirect@file,auth@file
        - traefik.frontend.rule=Host:alertmanager.${DOMAIN}

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8088:8080
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - monitor-net
      - traefik-public
    user: "472"
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - traefik.enable=true
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        # ${TODO: DOMAIN cannot be read after reboot}
        - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
        - traefik.http.routers.grafana.entrypoints=http,https
        - traefik.http.routers.grafana.service=grafana
      restart_policy:
        condition: on-failure