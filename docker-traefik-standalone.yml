version: '3.7'

services:
  traefik:
    image: traefik:v2.4.8
    restart: always
    # secrets:
    #   - security.htpasswd
    volumes:
      # - /mnt/gfs/traefik:/letsencrypt
      # - ./traefik-dynamic.yml:/traefik-dynamic.yml
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    networks:
      - traefik-public
    command:
      - --log.level=INFO
      - --api.dashboard=true
      - --api.debug=true
      - --providers.file.filename=/traefik-dynamic.yml
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      - --providers.docker.network=traefik-public
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certresolver=letsencrypt
      - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --pilot.dashboard=false
    deploy:
      replicas: ${TRAEFIK_REPLICAS:-1}
      placement:
        constraints:
          - node.role == manager
        preferences:
          - spread: node.id
      labels:
        - traefik.enable=true
        - traefik.http.services.traefik-api.loadbalancer.server.port=8080
        - traefik.http.routers.traefik-api.rule=Host(`traefik.${DOMAIN}`) # ${TODO: DOMAIN cannot be read after reboot}
        - traefik.http.routers.traefik-api.entrypoints=http,https
        - traefik.http.routers.traefik-api.middlewares=redirect@file,auth@file
        - traefik.http.routers.traefik-api.service=api@internal
      restart_policy:
        condition: any
        delay: 2s
        max_attempts: 5
        window: 120s

networks:
  traefik-public:
    external: true

secrets:
  security.htpasswd:
    external: true